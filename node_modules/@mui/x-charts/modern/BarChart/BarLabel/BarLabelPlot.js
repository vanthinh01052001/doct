import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["bars", "skipAnimation"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { useTransition } from '@react-spring/web';
import { BarLabelItem } from './BarLabelItem';
import { jsx as _jsx } from "react/jsx-runtime";
const leaveStyle = ({
  layout,
  yOrigin,
  x,
  width,
  y,
  xOrigin,
  height
}) => _extends({}, layout === 'vertical' ? {
  y: yOrigin,
  x: x + width / 2,
  height: 0,
  width
} : {
  y: y + height / 2,
  x: xOrigin,
  height,
  width: 0
});
const enterStyle = ({
  x,
  width,
  y,
  height
}) => ({
  x: x + width / 2,
  y: y + height / 2,
  height,
  width
});
/**
 * @ignore - internal component.
 */
function BarLabelPlot(props) {
  const {
      bars,
      skipAnimation
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const barLabelTransition = useTransition(bars, {
    keys: bar => `${bar.seriesId}-${bar.dataIndex}`,
    from: leaveStyle,
    leave: null,
    enter: enterStyle,
    update: enterStyle,
    immediate: skipAnimation
  });
  return /*#__PURE__*/_jsx(React.Fragment, {
    children: barLabelTransition((style, {
      seriesId,
      dataIndex,
      color,
      value,
      width,
      height
    }) => /*#__PURE__*/_jsx(BarLabelItem, _extends({
      seriesId: seriesId,
      dataIndex: dataIndex,
      value: value,
      color: color,
      width: width,
      height: height
    }, other, {
      style: style
    })))
  });
}
process.env.NODE_ENV !== "production" ? BarLabelPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  barLabel: PropTypes.oneOfType([PropTypes.oneOf(['value']), PropTypes.func]),
  bars: PropTypes.arrayOf(PropTypes.shape({
    color: PropTypes.string.isRequired,
    dataIndex: PropTypes.number.isRequired,
    height: PropTypes.number.isRequired,
    layout: PropTypes.oneOf(['horizontal', 'vertical']),
    maskId: PropTypes.string.isRequired,
    seriesId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
    value: PropTypes.number,
    width: PropTypes.number.isRequired,
    x: PropTypes.number.isRequired,
    xOrigin: PropTypes.number.isRequired,
    y: PropTypes.number.isRequired,
    yOrigin: PropTypes.number.isRequired
  })).isRequired,
  skipAnimation: PropTypes.bool
} : void 0;
export { BarLabelPlot };